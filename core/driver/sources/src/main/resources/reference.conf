// Default configuration for the org.virtuslab.ideprobe.config.IdeProbeConfig
// Comments starting with the # sign are for non-default configs which can be used by users.
// Comments starting with the // signs are for descriptions and guides.
probe {

  // `intellij` is for org.virtuslab.ideprobe.config.IntellijConfig - default values below:
  intellij {
    plugins = []
    version {
      // `release` is the "Version" and connected `build` is the "Build Number" of IntelliJ IDEA version. Both should
      // be provided and they should match. You can search for proper string pairs here:
      // https://www.jetbrains.com/intellij-repository/releases/ under "com.jetbrains.intellij.idea" heading.
      // If you want to change the default intellij version, provide both parameters in your .conf file.
      build = "222.4345.14"
      release = "2022.2.3"

      // `ext` stands for the file extension (file format). This config specifies which extension should be
      // downloaded and installed. By default, ".zip" distributions of IntelliJ IDEA are downloaded. For now
      // two extensions are supported: ".zip" and ".dmg". ".zip" is the default one whereas ".dmg" should be used
      // for Mac OS X only.
      ext = ".zip"
      # ext = ".dmg"

    }

    // Use `path` config with proper path if you want to use an existing Intellij instead of downloading a version.
    // Example path from IntelliJ installed on macOs:
    # path = "/Applications/IntelliJ IDEA CE.app/Contents"

  }

  // `workspace` is for `Option[org.virtuslab.ideprobe.config.WorkspaceConfig]` - default None,
  // hence comments added as a reference. You can specify the workspace by using the below configurations.
  # workspace {

  // First option is to use a Default workspace - by just specifying `probe.workspace.path` with a valid string.
  //
  // `probe.workspace.path` can point to:
  // a) a directory on the filesystem:
  // `probe.workspace.path = "file://home/foo/bar"`
  // b) a directory within a jar:
  // `probe.workspace.path = "jar:file://foo.jar!/bar/baz"`
  // c) a directory on the classpath:
  // `probe.workspace.path = "classpath:/foo/bar"`
  // d) an online resource (http/https) - which can be for example a github repository as below:
  //
  #   path = "https://github.com/VirtusLab/git-machete.git"

  // If `probe.workspace.path` is set and points to a git repository - you can choose one of three additional options:
  // `branch`, `tag` or `commit` - to specify the reference which should be checked out on the workspace setup.
  // Only one of them can be specified. You can as well not use any of these 3 options - in such scenario the default
  // branch will be checked out just like with a plain `git clone` command. Examples below:
  #   branch = "develop"
  #   tag = "v0.41.0"
  #   commit = "a1861fc3b70588acfa171000eb365bf75c143472"

  // Another option is to use an Existing workspace by passing a proper path to its directory
  // - use only `existing` config. In this case, `probe.workspace.path` MUST NOT be defined.
  // `probe.workspace.existing` can be used for scenarios where you want to reuse an existing workspace instead of
  // copying a workspace each time when tests run. It might be beneficial for big projects / repos.
  #   existing = "/Users/my_username/code/my_repository"
  # }

  // `resolvers` is for `org.virtuslab.ideprobe.config.DependenciesConfig.Resolvers` - default values below
  resolvers {

    // `intellij.repositories` contain patterns which should be resolved by ide-probe to download proper IntelliJ IDEA
    // edition (Community or Ultimate) from proper intelliJ repository. Words inside square brackets
    // are parts of the pattern that are replaced with proper values before download attempt. Current replacements
    // are as follows:
    //
    // "[orgPath]" -> for now it is always replaced by "com/jetbrains/intellij"
    // "[organisation]" -> for now it is always replaced by "com.jetbrains.intellij"
    // "[module]" -> for now it is always replaced by "idea"
    // "[artifact]" -> by default replaced by "ideaIC" (to use IntelliJ IDEA Community edition).
    //     You can use the IntelliJ IDEA Ultimate edition in two ways:
    //     - either replace "[artifact]" with "ideaIU" in your pattern (change the default config)
    //     - or use `IntelliJZipResolver.ultimate` directly from your code (no need to change default config)
    // "[ext]" -> value from `probe.intellij.version.ext` (".zip" by default)
    // "[revision]" -> value from `probe.intellij.version.release` - or from `probe.intellij.version.build` if `release` not found
    // "[build]" -> value from `probe.intellij.version.build`
    // "[version]" -> value from `probe.intellij.version.release` - or from `probe.intellij.version.build` if `release` not found
    // "[release]" -> value from `probe.intellij.version.release` if exists. If not - "[release]" will be replaced with
    //    the "snapshot-release" string. This replacement can be used to make sure that IntelliJ will be downloaded only
    //    based on IntelliJVersion's "release" - and NOT based on "build".
    //
    // You can use a custom intellij repository pattern(s) instead of the default ones by defining your patterns
    // in the `intellij.repositories` config.
    //
    // You can also add a custom intellij repository pattern(s) on top of the 6 default repositories, so that
    // ide-probe will first try using the IntelliJs downloaded from your repositories if present. If ide-probe doesn't
    // find the IntelliJ distribution by your patterns, it will use the default 6 repository patterns listed below.
    // To achieve that, specify a custom repository pattern and add the `official` or `default` keyword on another line.
    // Example below:
    // intellij.repositories = [
    //   "file:///"${HOME}"/.my_intellij_idea_downloads/[revision]/[artifact]-[revision][ext]",
    //   official
    // ]
    //
    // Moreover, you can add a pattern pointing to a directory of an installed IntelliJ instance instead of
    // pattern pointing to a .zip (or .dmg) file. ide-probe will recognize if the pattern points to a directory with
    // installed IntelliJ or to a .zip (or .dmg) file. For example, if you run the IntelliJ Plugin Verifier on your
    // repository (https://plugins.jetbrains.com/docs/intellij/tools-gradle-intellij-plugin.html#tasks-runpluginverifier),
    // then you could use following configuration:
    // intellij.repositories = [
    //   "file:///"${HOME}"/.pluginVerifier/ides/IC-[revision]/",
    //   official
    // ]
    //
    // Such config will make ide-probe use an installed IntelliJ from local filesystem from the
    // ~/.pluginVerifier/ides/IC-[revision]/ directory (if exists). If it does not exist under specified path,
    // then ide-probe will download it from one of the 6 official repositories.
    //
    // Note: if you use the `intellij.repositories` config with a value pointing to an installed
    // IntelliJ instance directory - then DO NOT use the `probe.intellij.path` config in the same time.
    // The `probe.intellij.path` config takes precedence over `intellij.repositories` in such case, so the path
    // from `intellij.repositories` would be ignored.
    //
    intellij.repositories = [
      "https://download.jetbrains.com/[module]/nightly/[artifact]-[revision][ext]",
      "https://download.jetbrains.com/[module]/[artifact]-[revision][ext]",
      "https://download.jetbrains.com/[module]/nightly/[artifact]-[revision].portable[ext]",
      "https://download.jetbrains.com/[module]/[artifact]-[revision].portable[ext]",
      "https://www.jetbrains.com/intellij-repository/releases/[orgPath]/[module]/[artifact]/[revision]/[artifact]-[revision][ext]",
      "https://www.jetbrains.com/intellij-repository/snapshots/[orgPath]/[module]/[artifact]/[revision]-EAP-SNAPSHOT/[artifact]-[revision]-EAP-SNAPSHOT[ext]",
      "https://www.jetbrains.com/intellij-repository/snapshots/[orgPath]/[module]/[artifact]/[revision]-EAP-CANDIDATE-SNAPSHOT/[artifact]-[revision]-EAP-CANDIDATE-SNAPSHOT[ext]",
      "https://www.jetbrains.com/intellij-repository/snapshots/[orgPath]/[module]/[artifact]/[revision]/[artifact]-[revision][ext]"
    ]

    // `plugins.repository.uri` is the URI of the plugin repository. Use this config if you want to use a non-standard
    // plugin repository. The standard one is defined below:
    plugins.repository.uri = "https://plugins.jetbrains.com/plugin/download"

    // `jbr.repositories` contains patterns for JBR versions which should be downloaded and used for tests.
    // ide-probe replaces words in square brackets with replacements as follows:
    // "[major]" -> the "major" part of the JBR release's version number - e.g. "17.0.4" from "17.0.4b469.53"
    // "[minor]" -> the "minor" part of the JBR release's version number - e.g. "b469.53" from "17.0.4b469.53"
    // "[platform]" -> value connected to the detected OS - "linux", "osx" or "windows"
    //
    // You can define your own `jbr.repositories` if you want to use a non-standard JBR repository pattern
    // instead of the 2 standard ones defined below.
    //
    // You can also add a custom JBR repository on top of the 2 default repositories, so that ide-probe will
    // first try using the JBRs downloaded from your repository if present. If ide-probe doesn't find the JBR
    // package in your repository, it will use the default 2 repositories listed below. To achieve that, specify
    // your custom repository pattern and add the `official` or `default` keyword on another line. Example below:
    // jbr.repositories = [
    //   "https://repositories.my-company.com/intellij-jbr/jbr-[major]-[platform]-x64-b[minor].tar.gz",
    //   official
    // ]
    //
    // The `jbr_dcevm` pattern applies only to versions of IntelliJ older than 2022.2 release, whereas
    // `jbr` pattern applies to newer versions where DCEVM is bundled by default.
    // Another important note: currently we are using only JBR packages with `x64` architecture support. During tests
    // it turned out that using `aarch64` packages on processors with `aarch64` architecture (Mac M1 Pro chip) results
    // in "Cannot load JVM bundle:" error. For some reason only `x64` packages work well (both for `x64` and `aarch64`
    // processor architectures). Hence `x64` should stay hardcoded in the `jbr.repositories` elements.
    //
    jbr.repositories = [
      "https://cache-redirector.jetbrains.com/intellij-jbr/jbr_dcevm-[major]-[platform]-x64-b[minor].tar.gz",
      "https://cache-redirector.jetbrains.com/intellij-jbr/jbr-[major]-[platform]-x64-b[minor].tar.gz"
    ]

    retries = 0
  }

  // `driver` is for `org.virtuslab.ideprobe.config.DriverConfig` - default values below
  driver {
    launch {
      command = []
      timeout = "30.seconds"
    }
    check {
      errors {
        enabled = false
        includeMessages = [".*"]
        excludeMessages = []
      }
      freezes.enabled = false
    }
    xvfb {
      screen {
        width = 1920
        height = 1080
        depth = 24
      }
    }
    headless = false
    vmOptions = []
    env = {}
  }

  // `paths` is for `org.virtuslab.ideprobe.config.PathsConfig` - default values below
  paths {
    // all parameters below are Options and are None by default - hence commented out

    // `base` is the base directory used by ide-probe. All files and directories used by ide-probe in runtime
    // should be under the `base` directory. By default, it gets resolved by java methods as follows:
    // Paths.get(System.getProperty("java.io.tmpdir")).resolve("ide-probe").
    // You can specify a custom directory by using this config.
    # base = "/tmp/ide-probe-tests"

    // `instances` is a directory, where IntelliJ instances are installed in runtime. By default, instances
    // directory is a direct subdirectory of the base dir: `base/instances`.
    # instances = "/tmp/ide-probe-tests/instances"

    // `workspaces` is  a directory, where workspaces (testing repositories) are copied into in runtime.
    // By default, workspaces directory is a direct subdirectory of the base dir: `base/workspaces`.
    # workspaces = "/tmp/ide-probe-tests/workspaces"

    // `screenshots` is  a directory, where screenshots made by ide-probe are saved.
    // By default, screenshots directory is a direct subdirectory of the base dir: `base/screenshots`.
    # screenshots = "/tmp/ide-probe-tests/screenshots"

    // `cache` is  a directory, where IntelliJ instances, plugins and JBR binaries are unpacked and saved into (for
    // later installation and usage). By default, cache directory is a direct subdirectory of the base dir: `base/cache`.
    # cache = "/tmp/ide-probe-tests/cache"

    // `trusted` is a directory passed to IntelliJ as a "trusted" directory. It means that IntelliJ instance will
    // treat all projects/repositories under the `trusted` directory as "safe" and will run the code without alerts.
    // By default, `trusted` is resolved as the root directory: "/".
    # trusted = "/"

    // `logExport` is a directory where logs from the intelliJ instance can be copied into before cleanup
    // of the IntelliJ instance. Specify proper path if you want to have access to IDEA logs after tests finish.
    // By default, `logExport` directory is NOT created and such data is deleted from the disk with all other files
    // from the IntelliJ instance directory. If you use this parameter, the `logExport` directory will be created
    // and it will NOT be removed/cleared. Example path below:
    # logExport = "/tmp/ide-probe/idea-logs"
  }
}
