// Default configuration for the org.virtuslab.ideprobe.config.IdeProbeConfig
// Comments starting with the # sign are for non-default configs which can be used by users.
// Comments starting with the // signs are for descriptions and guides.
probe {

  // `intellij` is for org.virtuslab.ideprobe.config.IntellijConfig - default values below:
  intellij {
    plugins = []
    version {
      // `release` is the "Version" and connected `build` is the "Build Number" of IntelliJ IDEA version. Both should
      // be provided and they should match. You can search for proper string pairs here:
      // https://www.jetbrains.com/intellij-repository/releases/ under "com.jetbrains.intellij.idea" heading.
      // If you want to change the default intellij version, provide both parameters in your .conf file.
      build = "222.3739.54"
      release = "2022.2.1"
    }
    // Use below config with proper path if you want to use an existing Intellij instead of downloading a version.
    // Example path from IntelliJ installed on macOs:
    # path = "/Applications/IntelliJ IDEA CE.app/Contents"
  }

  // `workspace` is for `Option[org.virtuslab.ideprobe.config.WorkspaceConfig]` - default None,
  // hence comments added as a reference. You can specify the workspace by using the below configurations.
  # workspace {
  // First option is to use a Default workspace - by just specifying `probe.workspace.path` with a valid string.
  //
  // `probe.workspace.path` can point to:
  // a) a directory on the filesystem:
  // `probe.workspace.path = "file://home/foo/bar"`
  // b) a directory within a jar:
  // `probe.workspace.path = "jar:file://foo.jar!/bar/baz"`
  // c) a directory on the classpath:
  // `probe.workspace.path = "classpath:/foo/bar"`
  // d) an online resource (http/https) - which can be for example a github repository as below:
  //
  #   path = "https://github.com/VirtusLab/git-machete.git"
  //
  // If `probe.workspace.path` is set and points to a git repository - you can choose one of three additional options:
  // `branch`, `tag` or `commit` - to specify the reference which should be checked out on the workspace setup.
  // Only one of them can be specified. You can as well not use any of these 3 options - in such scenario the default
  // branch will be checked out just like with a plain `git clone` command. Examples below:
  #   branch = "develop"
  #   tag = "v0.41.0"
  #   commit = "a1861fc3b70588acfa171000eb365bf75c143472"
  //
  // Another option is to use an Existing workspace by passing a proper path to its directory
  // - use only `existing` config. In this case, `probe.workspace.path` MUST NOT be defined.
  // `probe.workspace.existing` can be used for scenarios where you want to reuse an existing workspace instead of
  // copying a workspace each time when tests run. It might be beneficial for big projects / repos.
  #   existing = "/Users/my_username/code/my_repository"
  # }

  // `resolvers` is for `org.virtuslab.ideprobe.config.DependenciesConfig.Resolvers` - default values below
  resolvers {
    intellij {
      repositories = []
    }
    // default configuration for `plugins` is Plugins(None) - adding possible parameters in comments for reference
    plugins {
      // `repository.uri` is the URI of the plugin repository - use this config if you want to use a non-standard
      // plugin repository. The standard one used by ide-probe is: https://plugins.jetbrains.com/plugin/download
      # repository.uri = ""
    }
    jbr {
      repositories = []
    }
    retries = 0
  }

  // `driver` is for `org.virtuslab.ideprobe.config.DriverConfig` - default values below
  driver {
    launch {
      command = []
      timeout = "30.seconds"
    }
    check {
      errors {
        enabled = false
        includeMessages = [".*"]
        excludeMessages = []
      }
      freezes {
        enabled = false
      }
    }
    xvfb {
      screen {
        width = 1920
        height = 1080
        depth = 24
      }
    }
    headless = false
    vmOptions = []
    env = {}
  }

  // `paths` is for `org.virtuslab.ideprobe.config.PathsConfig` - default values below
  paths {
    // all parameters below are Options and are None by default - hence commented out
    //
    // `base` is the base directory used by ide-probe. All files and directories used by ide-probe in runtime
    // should be under the `base` directory. By default, it gets resolved by java methods as follows:
    // Paths.get(System.getProperty("java.io.tmpdir")).resolve("ide-probe").
    // You can specify a custom directory by using this config.
    # base = "/tmp/ide-probe-tests"
    //
    // `instances` is a directory, where IntelliJ instances are installed in runtime. By default, instances
    // directory is a direct subdirectory of the base dir: `base/instances`.
    # instances = "/tmp/ide-probe-tests/instances"
    //
    // `workspaces` is  a directory, where workspaces (testing repositories) are copied into in runtime.
    // By default, workspaces directory is a direct subdirectory of the base dir: `base/workspaces`.
    # workspaces = "/tmp/ide-probe-tests/workspaces"
    //
    // `screenshots` is  a directory, where screenshots made by ide-probe are saved.
    // By default, screenshots directory is a direct subdirectory of the base dir: `base/screenshots`.
    # screenshots = "/tmp/ide-probe-tests/screenshots"
    //
    // `cache` is  a directory, where IntelliJ instances, plugins and JBR binaries are unpacked and saved into (for
    // later installation and usage). By default, cache directory is a direct subdirectory of the base dir: `base/cache`.
    # cache = "/tmp/ide-probe-tests/cache"
    //
    // `trusted` is a directory passed to IntelliJ as a "trusted" directory. It means that IntelliJ instance will
    // treat all projects/repositories under the `trusted` directory as "safe" and will run the code without alerts.
    // By default, `trusted` is resolved as the root directory: "/".
    # trusted = "/"
    //
    // `logExport` is a directory where logs from the intelliJ instance can be copied into before cleanup
    // of the IntelliJ instance. Specify proper path if you want to have access to IDEA logs after tests finish.
    // By default, `logExport` directory is NOT created and such data is deleted from the disk with all other files
    // from the IntelliJ instance directory. If you use this parameter, the `logExport` directory will be created
    // and it will NOT be removed/cleared. Example path below:
    # logExport = "/tmp/ide-probe/idea-logs"
  }
}
